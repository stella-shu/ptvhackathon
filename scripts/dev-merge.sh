#!/usr/bin/env bash
set -euo pipefail

# Run from repo root
ROOT_DIR="$(cd "$(dirname "$0")"/.. && pwd)"
cd "$ROOT_DIR"

LOG_DIR="$ROOT_DIR/logs"
mkdir -p "$LOG_DIR"

echo "[dev-merge] Repo root: $ROOT_DIR"

# 1) Ensure .env.local exists with split targets (do not overwrite if present)
if [[ ! -f .env.local ]]; then
  echo "[dev-merge] Creating .env.local"
  cat > .env.local <<EOF
# Auto-generated by scripts/dev-merge.sh
# Split targets for Vite dev proxy
AUTH_TARGET=${AUTH_TARGET:-http://localhost:8080}
REALTIME_TARGET=${REALTIME_TARGET:-http://localhost:8081}
EOF
else
  echo "[dev-merge] Using existing .env.local"
fi

# 2) Start Postgres for Auth & Logs backend (if Docker available)
if command -v docker >/dev/null 2>&1; then
  echo "[dev-merge] Starting Postgres via docker compose"
  # Prefer docker compose v2 syntax with -f; fallback to docker-compose if needed
  if docker compose version >/dev/null 2>&1; then
    docker compose -f "Auth & Logs Backend "/docker-compose.yml up -d db
  else
    docker-compose -f "Auth & Logs Backend "/docker-compose.yml up -d db || true
  fi
else
  echo "[dev-merge] WARNING: docker not found. Skipping Postgres startup."
fi

# 3) Start Auth & Logs backend (8080)
if command -v mvn >/dev/null 2>&1; then
  echo "[dev-merge] Starting Auth & Logs Backend on :8080"
  (
    cd "Auth & Logs Backend "
    mvn -q spring-boot:run > "$LOG_DIR/auth-logs-backend.out" 2>&1 &
    echo $! > "$LOG_DIR/auth-logs-backend.pid"
  )
else
  echo "[dev-merge] ERROR: mvn not found. Please install Maven (or run backends manually)."
fi

# 4) Start Realtime Maps backend (8081)
if command -v mvn >/dev/null 2>&1; then
  echo "[dev-merge] Starting Realtime Maps Backend on :8081"
  (
    cd realtime-maps-backend
    mvn -q spring-boot:run -Dspring-boot.run.arguments=--server.port=8081 > "$LOG_DIR/realtime-maps-backend.out" 2>&1 &
    echo $! > "$LOG_DIR/realtime-maps-backend.pid"
  )
fi

echo "[dev-merge] Backends starting in background. Logs in $LOG_DIR"

# 5) Start frontend dev server (foreground)
echo "[dev-merge] Starting frontend dev server at http://127.0.0.1:5174"
npm run dev -- --host 127.0.0.1 --port 5174

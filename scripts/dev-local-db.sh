#!/usr/bin/env bash
set -euo pipefail

# One-click local dev without Docker: uses Homebrew Postgres, starts both Spring backends, then Vite.
# Requirements: macOS + Homebrew + Java 17 + Maven + Node 18+

ROOT_DIR="$(cd "$(dirname "$0")"/.. && pwd)"
cd "$ROOT_DIR"

LOG_DIR="$ROOT_DIR/logs"
mkdir -p "$LOG_DIR"

echo "[dev-local-db] Repo root: $ROOT_DIR"

# 0) Resolve Homebrew Postgres bin
if ! command -v brew >/dev/null 2>&1; then
  echo "[dev-local-db] ERROR: Homebrew not found. Install from https://brew.sh and re-run." >&2
  exit 1
fi

PG_PREFIX="$(brew --prefix postgresql@15 2>/dev/null || true)"
if [[ -z "$PG_PREFIX" || ! -d "$PG_PREFIX" ]]; then
  echo "[dev-local-db] Installing postgresql@15 via Homebrew (one-time)..."
  brew install postgresql@15
  PG_PREFIX="$(brew --prefix postgresql@15)"
fi

export PATH="$PG_PREFIX/bin:$PATH"
echo "[dev-local-db] Using Postgres from: $PG_PREFIX"

# 1) Ensure Postgres service is running
brew services start postgresql@15 || true

# 2) Prepare DB + user (idempotent)
createuser -s postgres 2>/dev/null || true
createdb inspector 2>/dev/null || true
psql -d postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';" >/dev/null || true

echo "[dev-local-db] Waiting for database to be ready..."
for i in {1..20}; do
  if pg_isready -h localhost -p 5432 >/dev/null 2>&1; then
    break
  fi
  sleep 0.5
done
pg_isready -h localhost -p 5432

# 3) Ensure .env.local for Vite split proxy
if [[ ! -f .env.local ]]; then
  cat > .env.local <<EOF
# Auto-generated by scripts/dev-local-db.sh
AUTH_TARGET=http://localhost:8080
REALTIME_TARGET=http://localhost:8081
EOF
  echo "[dev-local-db] Wrote .env.local (AUTH_TARGET/REALTIME_TARGET)"
else
  echo "[dev-local-db] Using existing .env.local"
fi

# 4) Start Auth & Logs backend (8080) against local Postgres
echo "[dev-local-db] Starting Auth & Logs Backend on :8080"
(
  cd "Auth & Logs Backend "
  DB_URL=jdbc:postgresql://localhost:5432/inspector \
  DB_USERNAME=postgres \
  DB_PASSWORD=postgres \
  mvn -q spring-boot:run > "$LOG_DIR/auth-logs-backend.out" 2>&1 &
  echo $! > "$LOG_DIR/auth-logs-backend.pid"
)

# 5) Start Realtime Maps backend (8081)
echo "[dev-local-db] Starting Realtime Maps Backend on :8081"
(
  cd realtime-maps-backend
  mvn -q spring-boot:run -Dspring-boot.run.arguments=--server.port=8081 > "$LOG_DIR/realtime-maps-backend.out" 2>&1 &
  echo $! > "$LOG_DIR/realtime-maps-backend.pid"
)

echo "[dev-local-db] Backends launched. Logs: $LOG_DIR"

# 6) Start frontend dev server (foreground)
echo "[dev-local-db] Starting Vite dev server at http://127.0.0.1:5174"
npm run dev -- --host 127.0.0.1 --port 5174

